version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive || echo "failed to remove the s3 files"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" || "failed to remove the frontend stack"
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" || "failed to remove the backend stack"
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            export SUCCESS=$(curl https://kvdb.io/$KVDB_ACCESS_KEY/migration_${CIRCLE_WORKFLOW_ID:0:7} -k)
            echo "success equals $SUCCESS"
            if [ "$SUCCESS" == 1 ]; 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
jobs:
  
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Building the frontend
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Building the backend
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Testing the frontend
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Testing the backend
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scanning the frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scanning the backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Deploying backend infrastructure
          command: |
            # pwd
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Deploying frontend infrastructure
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Building the inventory file that contains the target machines
          command: |
            # pwd
            mkdir -p /tmp/workspace
            touch /tmp/workspace/inventory.txt
            cd /tmp/workspace/
            echo "[web]" >> inventory.txt
            aws ec2 describe-instances \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --query Reservations[*].Instances[*].[PublicIpAddress] --output text >> /tmp/workspace/inventory.txt
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cytopia/ansible:latest-aws
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - add_ssh_keys:
          fingerprints: ["c4:90:bc:59:1c:6e:e3:7d:d7:8e:d6:a7:f9:af:70:96"]
      - run:
          name: Run Playbook and Configure server
          command: |
            # pwd
            cat /tmp/workspace/inventory.txt
            cd .circleci/ansible
            ansible-playbook -i /tmp/workspace/inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Installing aws-cli
          command: |
            sudo apt-get update
            sudo apt-get install --assume-yes awscli
      - run:
          name: Setting environment vars
          command: | 
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat backend/.env
      - run:
          name: Running migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Sending migration results to memstash
          command: |
            cat ~/project/backend/migrations_dump.txt
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              echo "setting the bucket value with 1"
              echo https://kvdb.io/$KVDB_ACCESS_KEY/migration_${CIRCLE_WORKFLOW_ID:0:7}
              curl -d '1' https://kvdb.io/$KVDB_ACCESS_KEY/migration_${CIRCLE_WORKFLOW_ID:0:7} -k
            fi
      - destroy-environment

  deploy-frontend:
    docker:
      - image: doctrine/nodejs-aws-cli
    steps:
      - add_ssh_keys:
          fingerprints: ["c4:90:bc:59:1c:6e:e3:7d:d7:8e:d6:a7:f9:af:70:96"]
      - checkout
      - run:
          name: Install tar utility
          command: |
            sudo apt-get install -y tar gzip
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install Ansible
          command: |
            sudo apt-get update
            sudo apt-get install -y ansible
            ansible --version
      - run:
          name: Install PM2
          command: |
            sudo npm i -g pm2
            pm2 -v
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --query Reservations[*].Instances[*].[PublicIpAddress] --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image: doctrine/nodejs-aws-cli
    steps:
      - add_ssh_keys:
          fingerprints: ["c4:90:bc:59:1c:6e:e3:7d:d7:8e:d6:a7:f9:af:70:96"]
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install tar utility
          command: |
            sudo apt-get install -y tar gzip
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install Ansible
          command: |
            sudo apt-get update
            sudo apt-get install -y ansible
            ansible --version
      - run:
          name: Setting environment vars
          command: | 
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat backend/.env
      - run: 
          name: Deploy backend
          command: | 
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czf artifact.tar.gz .
            cat /tmp/workspace/inventory.txt
            cd .circleci/ansible
            ansible-playbook -i /tmp/workspace/inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: alpine:latest 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            apk add --no-cache aws-cli
      - run:
          name: Backend smoke test.
          command: |
            #addint them both to 1 job because somehow the values are not passed between different commands
            export BACKEND_IP=$(aws ec2 describe-instances \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --query Reservations[*].Instances[*].[PublicIpAddress] --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            sleep 10
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run: 
          name: Extract old workflow id
          command: | 
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo OldID: "${OldWorkflowID}"
            echo CurrentID "${CIRCLE_WORKFLOW_ID:0:7}"
            mkdir -p /tmp/workspace && touch /tmp/workspace/old-workflow-id.txt
            echo "${OldWorkflowID}" >> /tmp/workspace/old-workflow-id.txt
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/cloudfront.yml \
                --stack-name InitialStack \
                --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
                --tags project=udapeople
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - old-workflow-id.txt
      - destroy-environment
      - revert-migrations

  cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run: yum -y install tar gzip
        - attach_workspace:
            at: /tmp/workspace
        - run:
            name: Remove old stacks and files
            command: |
              export OldWorkflowID=$(cat /tmp/workspace/old-workflow-id.txt)
              if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
              then
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive || true
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}" || true
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}" || true
              fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [test-frontend]
      - scan-backend:
          requires: [test-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only:
                - master
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-frontend, deploy-backend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]